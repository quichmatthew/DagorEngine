#  to be included in jBuild.jam

rule ProcessCompileTarget
{
  #  basic opts: warning/remark suppressing, additional includes etc.
  local _SUPPRESS_OPT = ;
  local _CONFIG_OPT = ;
  local pre_opt = ;
  local post_opt = ;

  switch $(Config) {
    case dev :
      if $(CheckOnly) != yes { _CONFIG_OPT = -Xclang -O3 /Gy /Gw ; } else { _CONFIG_OPT = /Od ; }
      _CONFIG_OPT += -DDAGOR_DBGLEVEL=1 ;
    case rel :
      _CONFIG_OPT = -Xclang -O3 /Gy /Gw -DDAGOR_DBGLEVEL=0 -DNDEBUG=1 -D_SECURE_SCL=0 ;
    case irel :
      _CONFIG_OPT = -Xclang -O3 /Gy /Gw -DDAGOR_DBGLEVEL=-1 -DNDEBUG=1 -D_SECURE_SCL=0 ;
    case dbg :
      _CONFIG_OPT = /Od /RTC1 -DDAGOR_DBGLEVEL=2 ;
    case analyze :
      _CONFIG_OPT = -Xclang -O3 /Gy /Gw -DDAGOR_DBGLEVEL=1 /analyze ;
    case prefast :
      _CONFIG_OPT = -Xclang -O3 /Gy /Gw -DDAGOR_DBGLEVEL=1 ;
    case * :
      _CONFIG_OPT = ;
  }
  if $(MSVectorcall) = yes { _CONFIG_OPT += /Gv ; }
  if $(CheckOnly) != yes { _CONFIG_OPT += /Zi ; }
  if $(StackProtection) = no { _CONFIG_OPT += /GS- ; }

  if $(Exceptions) != yes {
    _CONFIG_OPT += -D_HAS_EXCEPTIONS=0 -DEA_COMPILER_NO_NOEXCEPT ;
  } else {
    if ($CatchSEH) != yes {
      _CONFIG_OPT += /EHsc -DDAGOR_EXCEPTIONS_ENABLED=1 ;
    } else {
      _CONFIG_OPT += /EHac -DDAGOR_EXCEPTIONS_ENABLED=1 ;
    }
  }

  if $(Rtti) != yes {
    _CONFIG_OPT += /GR- ;
  }

  if $(Config) != dbg {
    _CONFIG_OPT += $(_VC_CRT_TYPE) ;
  } else {
    _CONFIG_OPT += $(_VC_CRT_TYPE)d ;
  }

  if $(DriverLinkage) = static { _CONFIG_OPT += -D_TARGET_STATIC_LIB=1 ; }
  if $(StarForce) = yes        { _CONFIG_OPT += -DSTARFORCE_PROTECT ; }
  if $(UseWholeOpt) != no {
    if $(UseWholeOpt) = yes {
      _CONFIG_OPT += -flto=thin ;
    } else {
      _CONFIG_OPT += -flto=$(UseWholeOpt) ;
    }
  }

  if $(Analyze) = yes          { _CONFIG_OPT += /analyze ; }

  _CONFIG_OPT += /FS ;         # Force Synchronous PDB Writes.

  _CPP_OPT = -I$(AddIncludes) $(_CONFIG_OPT) $(_SUPPRESS_OPT) $(CPPopt) $(GlobalCPPopt) ;

  include $(Root)/prog/_jBuild/_vc/add_fp_fast.jam ;
  $(Target)__CPP_OPT = -FImemory/dag_memBase.h $(post_opt) $(_CPP_OPT) -TP ;
  
  if $(StrictCompile) = yes {
    if ! [ MATCH /(3rdPartyLibs)/ : $(Location) ] { $(Target)__CPP_OPT += -Wunused-parameter -Wunused-variable -Werror=unused-parameter -Werror=unused-variable /permissive- ; }
  }

  $(Target)__C_OPT   = $(post_opt) $(Copt) $(_CPP_OPT) ;
  $(Target)__ASM_OPT = -I$(AddIncludes)/ $(ASMopt) ;
  $(Target)__PRE_OPT = $(pre_opt) ;
  include $(Root)/prog/_jBuild/_vc/add_fd_opt.jam ;
}


rule DepRule
{
  local changed_dep = ;

  # add $(Root) prefix when needed
  for dep in $(>)
  {
    switch $(dep) 
    {
      case ?:* : changed_dep += $(dep) ;   # absolute path with drive
      case \\* : changed_dep += $(dep) ;   # absolute path with root foolder (\)
      case /*  : changed_dep += $(dep) ;   # absolute path with root foolder (/)
      case *   : changed_dep += $(Root)/$(dep) ; # relative path, add $(Root) prefix
    }
  }
  Includes $(<) : $(changed_dep) ;
  null_action $(changed_dep) ;
}


rule CheckHeaders
{
  Depends $(<) : $(>) ;
  NoCare $(>) ; # tolerant to .d absence
  NOUPDATE $(>) ; # tolerant to .d timestamp

  # scan line for header, skipping any ../ at the beginning [will be prefixed with $(Root)]
  HDRSCAN   on $(>) = "^.*: [\.\\\/]*([^\
]*).*$" ;
  HDRRULE   on $(>) = DepRule ;
}


actions together quietly compile_cpp
{
#async
  $(VC_START_SHOW_INCLUDES_FILTER)
  set_filter $(1:S=.d) /$(VC_SHOW_INCLUDES_FILTER_PREFIX)(.+)/d1 $(1:G=:D=): $1
  echo $(2:G=:D=)
  call_filtered $(_CPP_COMPILER) $(pre_opt) $(_CPP_BASE_INCLUDES) $(cpp_opt) -showIncludes #\(-Fo$(1) $(2:G=))\#
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end

  clr_filters
  $(CODE_CHECK) -x $(1) $(2)
}

actions together quietly compile_prefast_cpp
{
  set PATH=#\($(_VC_DIR)/bin)\#
  call $(_PREFAST_COMPILER) $(pre_opt) $(_CPP_BASE_INCLUDES) $(cpp_opt) #\(-Fo$(1) $(2:G=))\#
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

actions together quietly compile_c
{
#async
  $(VC_START_SHOW_INCLUDES_FILTER)
  set_filter $(1:S=.d) /$(VC_SHOW_INCLUDES_FILTER_PREFIX)(.+)/d1 $(1:G=:D=): $1
  echo $(2:G=:D=)
  call_filtered $(_C_COMPILER) $(pre_opt) $(_C_BASE_INCLUDES) $(c_opt) -showIncludes #\(-Fo$(1) $(2:G=))\#
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end

  clr_filters
  $(CODE_CHECK) -x $(1) $(2)
}

include $(Root)/prog/_jBuild/_vc/win_rc.jam ;
