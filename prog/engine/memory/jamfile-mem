StrictCompile = yes ;
include $(Root)/prog/_jBuild/defaults.jam ;
if $(GLOBAL_DependOnJam) { DependOnJams += $(Root)/prog/engine/memory/jamfile-mem ; } # to handle depjam case

UseMemoryDebugLevel ?= def ;
switch $(UseMemoryDebugLevel)
{
  case def  : CPPopt += ;
  case off  : CPPopt += -DMEM_DEBUGALLOC=-1 ; Target = $(Target:S=-nd.lib) ;
  case min  : CPPopt += -DMEM_DEBUGALLOC=0 ;  Target = $(Target:S=-d0.lib) ;
  case dbg  : CPPopt += -DMEM_DEBUGALLOC=1 ;  Target = $(Target:S=-d1.lib) ;
  case dbg2 : CPPopt += -DMEM_DEBUGALLOC=2 ;  Target = $(Target:S=-d2.lib) ;
  case dbg3 : CPPopt += -DMEM_DEBUGALLOC=3 ;  Target = $(Target:S=-d3.lib) ;
  case dbg4 : CPPopt += -DMEM_DEBUGALLOC=4 ;  Target = $(Target:S=-d4.lib) ;
  case dbg5 : CPPopt += -DMEM_DEBUGALLOC=5 ;  Target = $(Target:S=-d5.lib) ;
  case mtrk : CPPopt += -DMEMORY_TRACKER=1 ;  Target = $(Target:S=-mtrk.lib) ;
  case * : Exit Unsupported UseMemoryDebugLevel \= $(UseMemoryDebugLevel) ;
}

AddIncludes +=
  $(Root)/prog/engine/sharedInclude
;

Sources +=
  dlmalloc-2.8.4.c
  dagmem.cpp
  allocStep.cpp
  maxCrtPoolSz.cpp
  mspaceAlloc.cpp
  framemem.cpp
  physMem.cpp
;

if $(DriverLinkage) != dynamic && $(Config) != dbg { UseProgLibs += engine/memory/rtlOverride ; }

if $(Platform) in macosx iOS tvOS {
  Sources +=
    macMemInit.m
  ;
}
if $(Platform) in win32 win64 winarm64 xboxOne scarlett {
  Sources +=
    win32MoreCore.cpp
    dagmem_start.c
  ;
}
if $(Platform) in ps4 ps5 {
  if -DUSE_MIMALLOC=1 in $(CPPopt) {
  } else if $(Sanitize) = address {
    Sources += sony/sanitizedMspace.cpp ;
  } else {
    Sources += sony/mspace.cpp ;
  }
}

CPPopt += -D__B_MINICORE ;

include $(Root)/prog/_jBuild/build.jam ;
