ReproducibleExeBuild = yes ;
WinSdkVer  = win.sdk.100 ;

ProjectAllowsOodle = yes ;

Platform ?= win64 ;
if $(Platform) = win64 { PlatformSpec_win64 ?= clang ; CPPStd = 20 ; }

Root    ?= ../../../.. ;
Location = prog/tools/ShaderCompiler2/nodeBased ;

ConsoleExe      = yes ;

TargetType  = exe ;

Target = tools/dsc2-nodeBased.exe ;

OutDir      = $(Root)/tools/dagor3_cdk/util ;
if $(Platform) = win64 { OutDir = $(OutDir)64 ; }
if $(Platform) = winarm64 { OutDir = $(OutDir)ARM64 ; }

NodeBasedCompiler = yes ;
DontUseVulkanGlslang = yes ;

include $(Root)/prog/_jBuild/defaults.jam ;

Sources =
  main.cpp
  dx11.cpp
  spirv.cpp
  dx12.cpp
  metal.cpp
  winmain_con.cpp
  debugSpitfile.cpp
;

AddIncludes =
  $(Root)/prog/gameLibs/publicInclude
  $(Root)/prog/tools/ShaderCompiler2/hlsl2spirv
  $(Root)/prog/tools/ShaderCompiler2/hlsl2metal
  $(Root)/prog/tools/ShaderCompiler2/hlsl11transcode
  $(Root)/prog/tools/ShaderCompiler2/dx12
  $(Root)/prog/engine/drv/drv3d_pc_multi # for d3d::compile_compute_shader_hlsl()
;

UseProgLibs =
  engine/osApiWrappers
  engine/kernel
  engine/memory
  engine/ioSys
  engine/startup
  engine/baseUtil
  engine/math
  engine/perfMon/daProfilerStub
  gameLibs/nodeBasedShaderManager
  gameLibs/webui/plugins/shaderEditors

  tools/ShaderCompiler2/hlsl2spirv
  tools/ShaderCompiler2/hlsl2metal
  tools/ShaderCompiler2/dx12
  3rdPartyLibs/regExp
;
UseMemoryDebugLevel = off ;

CPPopt = -DBINDUMP_TARGET_BE=0 -DIS_OFFLINE_SHADER_COMPILER=1 ;
if $(Platform) in win32 win64 winarm64 { VCMathOption = -fp:precise ; }

if [ GLOB $(_DEVTOOL)/ps4.sdk.$(PS4SdkVer) : * ] && [ GLOB $(Root)/prog/tools/ShaderCompiler2/ps4transcode :  jamfile ] {

  Sources +=
    pssl.cpp
    ps5.cpp
  ;
  AddIncludes +=
    $(Root)/prog/tools/ShaderCompiler2/ps4transcode
    $(Root)/prog/tools/ShaderCompiler2/ps5transcode
  ;
  UseProgLibs +=
    tools/ShaderCompiler2/ps4transcode
    tools/ShaderCompiler2/ps5transcode
  ;
  CPPopt += -DHAS_PS4_PS5_TRANSCODE ;
}

include $(Root)/prog/_jBuild/build.jam ;
